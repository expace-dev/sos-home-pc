{{ form_start(form) }}

    <div class="row">

        
        <div class="col-lg-6">
            {{ form_row(form.nom) }}
        </div>
        <div class="col-lg-6">
            {{ form_row(form.prenom) }}
        </div>

        <div class="col-lg-12">
            {{ form_row(form.adresse) }}
        </div>

        {{ form_widget(form.codePostal) }}
        {{ form_widget(form.ville) }}
        {{ form_widget(form.pays) }}

        <div class="col-lg-12">
            {{ form_row(form.societe) }}
        </div>

        <div class="col-lg-6">
            {{ form_row(form.email) }}
        </div>
        <div class="col-lg-6">
            {{ form_row(form.telephone) }}
        </div>

        <div class="col-lg-12">
        {{ form_widget(form.avatar) }}
        </div>

    </div>
    
    <button class="btn mt-4 col-lg-12">{{ button_label|default('Save') }}</button>
{{ form_end(form) }}


<script>
let autocomplete;
let address1Field;
let postalField;

function initAutocomplete() {
  address1Field = document.querySelector("#profil_adresse");
  postalField = document.querySelector("#profil_codePostal");
  // Create the autocomplete object, restricting the search predictions to
  // addresses in the US and Canada.
  autocomplete = new google.maps.places.Autocomplete(address1Field, {
    componentRestrictions: { country: ["fr", "ca"] },
    fields: ["address_components", "geometry"],
    types: ["address"],
  });
  address1Field;
  // When the user selects an address from the drop-down, populate the
  // address fields in the form.
  autocomplete.addListener("place_changed", fillInAddress);
}

function fillInAddress() {
  // Get the place details from the autocomplete object.
  const place = autocomplete.getPlace();
  let address1 = "";
  let postcode = "";

  // Get each component of the address from the place details,
  // and then fill-in the corresponding field on the form.
  // place.address_components are google.maps.GeocoderAddressComponent objects
  // which are documented at http://goo.gle/3l5i5Mr
  for (const component of place.address_components) {
    // @ts-ignore remove once typings fixed
    const componentType = component.types[0];

    switch (componentType) {
      case "street_number": {
        address1 = `${component.long_name} ${address1}`;
        break;
      }

      case "route": {
        address1 += component.short_name;
        break;
      }

      case "postal_code": {
        postcode = `${component.long_name}${postcode}`;
        break;
      }

      case "postal_code_suffix": {
        postcode = `${postcode}-${component.long_name}`;
        break;
      }
      case "locality":
        document.querySelector("#profil_ville").value = component.long_name;
        break;
      case "country":
        document.querySelector("#profil_pays").value = component.long_name;
        break;
    }
  }

  address1Field.value = address1;
  postalField.value = postcode;
  // After filling the form with address components from the Autocomplete
  // prediction, set cursor focus on the second address line to encourage
  // entry of subpremise information such as apartment, unit, or floor number.
}

window.initAutocomplete = initAutocomplete;

</script>
<script
      src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBuos4hJNoAMuDoAawMEDaR94xZOQAVvJo&callback=initAutocomplete&libraries=places&v=weekly"
      defer
    ></script>

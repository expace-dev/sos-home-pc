<div {{ attributes }} >

    <script>
        function generate(l) {
            if (typeof l==='undefined'){var l=14;}
            /* c : chaîne de caractères alphanumérique */
            var c='abcdefghijknopqrstuvwxyzACDEFGHJKLMNPQRSTUVWXYZ0123456789',
            n=c.length,
            /* p : chaîne de caractères spéciaux */
            p='0123456789',
            o=p.length,
            r='',
            n=c.length,
            /* s : determine la position du caractère spécial dans le mdp */
            s=Math.floor(Math.random() * (p.length-1));

            for(var i=0; i<l; ++i){
                if(s == i){
                    /* on insère à la position donnée un caractère spécial aléatoire */
                    r += p.charAt(Math.floor(Math.random() * o));
                }
                else{
                    /* on insère un caractère alphanumérique aléatoire */
                    r += c.charAt(Math.floor(Math.random() * n));
                }
            }
            return r;
        }

        /* exemple de fonction génération de mdp dans un form (utilise JQuery) */
        $(document).ready(function() {
            /* on détecte un des champ du formulaire contient une class "gen", on insérera un bouton dans sa div parent qui appelera la fonction generate() */
            if($('form input.gen').length){
                $('form input.gen').each(function(){
                    $('').appendTo($(this).parent());
                });
            }
   
            /* évènement click sur un element de class "generate" > appelle la fonction generate() */
            $(document).on('click','.generate', function(e){
                e.preventDefault();
                /* ajout du mot de passe + changement du paramètre type de password vers text (pour lisibilité) */
                $(this).parent().children('input').val(generate()).attr('type','text');
            });
        });
    </script>
    {{ form_start(form, {attr: {'data-model': '*'}}) }}
        <div class="row justify-content-center">
            <div class="col-md-5">
                {{ form_row(form.societe) }}
                <div class="row">
                    <div class="col-md-6">
                        {{ form_row(form.nom) }}
                    </div>
                    <div class="col-md-6">
                        {{ form_row(form.prenom) }}
                    </div>
                </div>
                {{ form_row(form.adresse) }}
                <div class="row">
                    <div class="col-md-3">
                        {{ form_row(form.codePostal) }}
                    </div>
                    <div class="col-md-9">
                        {{ form_row(form.ville) }}
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        {{ form_row(form.etat) }}
                    </div>
                    <div class="col-md-6">
                        {{ form_row(form.pays) }}
                    </div>
                </div>
            </div>
            <div class="col-md-5">
                {{ form_row(form.telephone) }}
                {{ form_row(form.mobile) }}
                {{ form_row(form.fax) }}
                {{ form_row(form.email) }}
                {{ form_row(form.web) }}
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-5">{{ form_row(form.username) }}</div>
            <div class="col-md-5">
                {{ form_label(form.plainPassword) }}
                <div class="input-group">
                    {{ form_widget(form.plainPassword) }}
                    <button class="btn btn-secondary generate" type="button">Générer un mot de passe</button>
                </div>
                {{ form_errors(form.plainPassword) }}
            </div>
        </div>
        <div class="row justify-content-center">
            <div class="col-md-10 text-end">
                <div style="padding-top: 1rem; padding-bottom: 1rem;">
                    <button class="btn btn-success">Enregistrer</button>
                    {% if is_granted("ROLE_ADMIN") %}
                        <a href="{{ path('app_admin_users_index') }}" class="btn btn-secondary">Annuler</a>
                    {% else %}
                        <a href="{{ path('app_home') }}" class="btn btn-secondary">Annuler</a>
                    {% endif %}
                </div>
            </div>
        </div>
    {{ form_end(form) }}
    <script>
        let autocomplete;
        let address1Field;
        let postalField;

        function initAutocomplete() {
            address1Field = document.querySelector("#users_adresse");
            postalField = document.querySelector("#users_codePostal");
            // Create the autocomplete object, restricting the search predictions to
            // addresses in the US and Canada.
            autocomplete = new google.maps.places.Autocomplete(address1Field, {
                fields: ["address_components", "geometry"],
                types: ["address"],
            });
            // When the user selects an address from the drop-down, populate the
            // address fields in the form.
            autocomplete.addListener("place_changed", fillInAddress);
        }

        function fillInAddress() {
            // Get the place details from the autocomplete object.
            const place = autocomplete.getPlace();
            let address1 = "";
            let postcode = "";

            // Get each component of the address from the place details,
            // and then fill-in the corresponding field on the form.
            // place.address_components are google.maps.GeocoderAddressComponent objects
            // which are documented at http://goo.gle/3l5i5Mr
            for (const component of place.address_components) {
                // @ts-ignore remove once typings fixed
                const componentType = component.types[0];

                switch (componentType) {
                case "street_number": {
                    address1 = `${component.long_name} ${address1}`;
                    break;
                }

                case "route": {
                    address1 += component.short_name;
                    break;
                }

                case "postal_code": {
                    postcode = `${component.long_name}${postcode}`;
                    break;
                }
        
                case "postal_code_suffix": {
                    postcode = `${postcode}-${component.long_name}`;
                    break;
                }
                case "locality":
                document.querySelector("#users_ville").value = component.long_name;
                break;
                case "administrative_area_level_1": {
                    document.querySelector("#users_etat").value = component.short_name;
                    break;
                }
                case "country":
                    document.querySelector("#users_pays").value = component.long_name;
                    break;
                }
            }

            address1Field.value = address1;
            postalField.value = postcode;
            // After filling the form with address components from the Autocomplete
            // prediction, set cursor focus on the second address line to encourage
            // entry of subpremise information such as apartment, unit, or floor number.
        }

        window.initAutocomplete = initAutocomplete;
    </script>

    <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyBuos4hJNoAMuDoAawMEDaR94xZOQAVvJo&callback=initAutocomplete&libraries=places&v=weekly" defer></script>

</div>
